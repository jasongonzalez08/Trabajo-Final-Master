SELECT*
FROM
"TFM"."COMPANIES"."DATOS"
LIMIT 10;
-- verificacion de los datos cargados csv
-----------------------------


-- Tabla para Países (Countries)
CREATE OR REPLACE TABLE TFM.COMPANIES.COUNTRIES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL
);

-- Tabla para Ciudades (Cities), relacionada con Países
CREATE OR REPLACE TABLE TFM.COMPANIES.CITIES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) NOT NULL,
    COUNTRY_ID NUMBER REFERENCES TFM.COMPANIES.COUNTRIES(ID),
    UNIQUE (NAME, COUNTRY_ID)
);

-- Tabla para Sectores (Sectors)
CREATE OR REPLACE TABLE TFM.COMPANIES.SECTORS (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL
);

-- Tabla para Industrias (Industries), opcionalmente relacionada con Sectores
CREATE OR REPLACE TABLE TFM.COMPANIES.INDUSTRIES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL,
    SECTOR_ID NUMBER REFERENCES TFM.COMPANIES.SECTORS(ID)
);

-- Tabla para Tipos de Compañía (Company Types)
CREATE OR REPLACE TABLE TFM.COMPANIES.COMPANY_TYPES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL
);

-- Tabla para Tipos de Empleados (Employee Types)
CREATE OR REPLACE TABLE TFM.COMPANIES.EMPLOYEE_TYPES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL
);

-- Tabla para Tipos de Ingresos (Revenue Types)
CREATE OR REPLACE TABLE TFM.COMPANIES.REVENUE_TYPES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL
);

----------------------------------------------
-- Tabla principal para Compañías (Companies), con referencias a las tablas relacionadas
CREATE OR REPLACE TABLE TFM.COMPANIES.COMPANIES (
    ID NUMBER AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(16777216) UNIQUE NOT NULL,
    CITY_ID NUMBER REFERENCES TFM.COMPANIES.CITIES(ID),
    COMPANY_TYPE_ID NUMBER REFERENCES TFM.COMPANIES.COMPANY_TYPES(ID),
    EMPLOYEE_TYPE_ID NUMBER REFERENCES TFM.COMPANIES.EMPLOYEE_TYPES(ID),
    REVENUE_TYPE_ID NUMBER REFERENCES TFM.COMPANIES.REVENUE_TYPES(ID),
    SECTOR_ID NUMBER REFERENCES TFM.COMPANIES.SECTORS(ID),
    INDUSTRY_ID NUMBER REFERENCES TFM.COMPANIES.INDUSTRIES(ID),
    EMPLOYEES NUMBER(38,1),
    REVENUES NUMBER(38,0),
    WEBSITE VARCHAR(16777216),
    FOUNDATION_YEAR NUMBER(38,1),
    LINKEDIN_LINK VARCHAR(16777216),
    LINKEDIN_FOLLOWERS NUMBER(38,1),
    X_LINK VARCHAR(16777216),
    X_USERNAME VARCHAR(16777216),
    X_FOLLOWERS NUMBER(38,1),
    TWEETS NUMBER(38,1),
    FACEBOOK_LINK VARCHAR(16777216),
    INSTAGRAM_LINK VARCHAR(16777216),
    CEO VARCHAR(16777216),
    CEO_GENDER VARCHAR(16777216),
    CEO_APPROVAL NUMBER(38,1),
    ESG_SCORE NUMBER(38,6),
    ENVIRONMENTAL_SCORE NUMBER(38,6),
    SOCIAL_SCORE NUMBER(38,6),
    GOVERNANCE_SCORE NUMBER(38,6),
    STACK VARCHAR(16777216),
    ALTERNATE_WEBSITES VARCHAR(16777216),
    TALKING_POINTS VARCHAR(16777216)
);

-- Tablas adicionales para atributos multivaluados (normalización adicional si STACK, ALTERNATE_WEBSITES y TALKING_POINTS son listas)
-- Tabla para Sitios Web Alternativos (Alternate Websites)
CREATE OR REPLACE TABLE TFM.COMPANIES.COMPANY_ALTERNATE_WEBSITES (
    COMPANY_ID NUMBER REFERENCES TFM.COMPANIES.COMPANIES(ID),
    WEBSITE VARCHAR(16777216) NOT NULL,
    PRIMARY KEY (COMPANY_ID, WEBSITE)
);

-- Tabla para Stack Tecnológico (Stack)
CREATE OR REPLACE TABLE TFM.COMPANIES.COMPANY_STACKS (
    COMPANY_ID NUMBER REFERENCES TFM.COMPANIES.COMPANIES(ID),
    TECH VARCHAR(16777216) NOT NULL,
    PRIMARY KEY (COMPANY_ID, TECH)
);

-- Tabla para Puntos de Conversación (Talking Points)
CREATE OR REPLACE TABLE TFM.COMPANIES.COMPANY_TALKING_POINTS (
    COMPANY_ID NUMBER REFERENCES TFM.COMPANIES.COMPANIES(ID),
    POINT VARCHAR(16777216) NOT NULL,
    PRIMARY KEY (COMPANY_ID, POINT)
);

-----------------------------------------------------------
-- Poblar COUNTRIES
MERGE INTO TFM.COMPANIES.COUNTRIES T
USING (
    SELECT DISTINCT COUNTRY AS NAME
    FROM TFM.COMPANIES.DATOS
    WHERE COUNTRY IS NOT NULL
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (NAME) VALUES (S.NAME);

-- Poblar CITIES (depende de COUNTRIES)
MERGE INTO TFM.COMPANIES.CITIES T
USING (
    SELECT DISTINCT D.CITY AS NAME, C.ID AS COUNTRY_ID
    FROM TFM.COMPANIES.DATOS D
    JOIN TFM.COMPANIES.COUNTRIES C ON D.COUNTRY = C.NAME
    WHERE D.CITY IS NOT NULL
) S
ON T.NAME = S.NAME AND T.COUNTRY_ID = S.COUNTRY_ID
WHEN NOT MATCHED THEN
INSERT (NAME, COUNTRY_ID) VALUES (S.NAME, S.COUNTRY_ID);

-- Poblar SECTORS
MERGE INTO TFM.COMPANIES.SECTORS T
USING (
    SELECT DISTINCT SECTOR AS NAME
    FROM TFM.COMPANIES.DATOS
    WHERE SECTOR IS NOT NULL
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (NAME) VALUES (S.NAME);

-- Poblar INDUSTRIES (depende de SECTORS)
MERGE INTO TFM.COMPANIES.INDUSTRIES T
USING (
    SELECT DISTINCT D.INDUSTRY AS NAME, S.ID AS SECTOR_ID
    FROM TFM.COMPANIES.DATOS D
    LEFT JOIN TFM.COMPANIES.SECTORS S ON D.SECTOR = S.NAME
    WHERE D.INDUSTRY IS NOT NULL
) S
ON T.NAME = S.NAME AND (T.SECTOR_ID = S.SECTOR_ID OR (T.SECTOR_ID IS NULL AND S.SECTOR_ID IS NULL))
WHEN NOT MATCHED THEN
    INSERT (NAME, SECTOR_ID) VALUES (S.NAME, S.SECTOR_ID);

-- Poblar COMPANY_TYPES
MERGE INTO TFM.COMPANIES.COMPANY_TYPES T
USING (
    SELECT DISTINCT COMPANY_TYPE AS NAME
    FROM TFM.COMPANIES.DATOS
    WHERE COMPANY_TYPE IS NOT NULL
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (NAME) VALUES (S.NAME);

-- Poblar EMPLOYEE_TYPES
MERGE INTO TFM.COMPANIES.EMPLOYEE_TYPES T
USING (
    SELECT DISTINCT EMPLOYEE_TYPE AS NAME
    FROM TFM.COMPANIES.DATOS
    WHERE EMPLOYEE_TYPE IS NOT NULL
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (NAME) VALUES (S.NAME);

-- Poblar REVENUE_TYPES
MERGE INTO TFM.COMPANIES.REVENUE_TYPES T
USING (
    SELECT DISTINCT REVENUE_TYPE AS NAME
    FROM TFM.COMPANIES.DATOS
    WHERE REVENUE_TYPE IS NOT NULL
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (NAME) VALUES (S.NAME);

-- Paso 2: Poblar la tabla principal COMPANIES con MERGE (evita duplicados por NAME)
MERGE INTO TFM.COMPANIES.COMPANIES T
USING (
    SELECT
        D.COMPANY AS NAME,
        CC.ID AS CITY_ID,
        CT.ID AS COMPANY_TYPE_ID,
        ET.ID AS EMPLOYEE_TYPE_ID,
        RT.ID AS REVENUE_TYPE_ID,
        S.ID AS SECTOR_ID,
        I.ID AS INDUSTRY_ID,
        D.EMPLOYEES,
        D.REVENUES,
        D.WEBSITE,
        D.FOUNDATION_YEAR,
        D.LINKEDIN_LINK,
        D.LINKEDIN_FOLLOWERS,
        D.X_LINK,
        D.X_USERNAME,
        D.X_FOLLOWERS,
        D.TWEETS,
        D.FACEBOOK_LINK,
        D.INSTAGRAM_LINK,
        D.CEO,
        D.CEO_GENDER,
        D.CEO_APPROVAL,
        D.ESG_SCORE,
        D."environmental score (ESG)" AS ENVIRONMENTAL_SCORE,
        D."social score (ESG)" AS SOCIAL_SCORE,
        D."governance score (ESG)" AS GOVERNANCE_SCORE,
        D.STACK,
        D.ALTERNATE_WEBSITES,
        D.TALKING_POINTS
    FROM TFM.COMPANIES.DATOS D
    LEFT JOIN (
        SELECT CI.ID, CI.NAME AS CITY_NAME, CO.NAME AS COUNTRY_NAME
        FROM TFM.COMPANIES.CITIES CI
        JOIN TFM.COMPANIES.COUNTRIES CO ON CI.COUNTRY_ID = CO.ID
    ) CC ON D.CITY = CC.CITY_NAME AND D.COUNTRY = CC.COUNTRY_NAME
    LEFT JOIN TFM.COMPANIES.COMPANY_TYPES CT ON D.COMPANY_TYPE = CT.NAME
    LEFT JOIN TFM.COMPANIES.EMPLOYEE_TYPES ET ON D.EMPLOYEE_TYPE = ET.NAME
    LEFT JOIN TFM.COMPANIES.REVENUE_TYPES RT ON D.REVENUE_TYPE = RT.NAME
    LEFT JOIN TFM.COMPANIES.SECTORS S ON D.SECTOR = S.NAME
    LEFT JOIN TFM.COMPANIES.INDUSTRIES I ON D.INDUSTRY = I.NAME AND (S.ID = I.SECTOR_ID OR (S.ID IS NULL AND I.SECTOR_ID IS NULL))
) S
ON T.NAME = S.NAME
WHEN NOT MATCHED THEN
    INSERT (
        NAME, CITY_ID, COMPANY_TYPE_ID, EMPLOYEE_TYPE_ID, REVENUE_TYPE_ID, SECTOR_ID, INDUSTRY_ID,
        EMPLOYEES, REVENUES, WEBSITE, FOUNDATION_YEAR, LINKEDIN_LINK, LINKEDIN_FOLLOWERS,
        X_LINK, X_USERNAME, X_FOLLOWERS, TWEETS, FACEBOOK_LINK, INSTAGRAM_LINK,
        CEO, CEO_GENDER, CEO_APPROVAL, ESG_SCORE, ENVIRONMENTAL_SCORE, SOCIAL_SCORE,
        GOVERNANCE_SCORE, STACK, ALTERNATE_WEBSITES, TALKING_POINTS
    ) VALUES (
        S.NAME, S.CITY_ID, S.COMPANY_TYPE_ID, S.EMPLOYEE_TYPE_ID, S.REVENUE_TYPE_ID, S.SECTOR_ID, S.INDUSTRY_ID,
        S.EMPLOYEES, S.REVENUES, S.WEBSITE, S.FOUNDATION_YEAR, S.LINKEDIN_LINK, S.LINKEDIN_FOLLOWERS,
        S.X_LINK, S.X_USERNAME, S.X_FOLLOWERS, S.TWEETS, S.FACEBOOK_LINK, S.INSTAGRAM_LINK,
        S.CEO, S.CEO_GENDER, S.CEO_APPROVAL, S.ESG_SCORE, S.ENVIRONMENTAL_SCORE, S.SOCIAL_SCORE,
        S.GOVERNANCE_SCORE, S.STACK, S.ALTERNATE_WEBSITES, S.TALKING_POINTS
    );

-- Paso 3: Poblar tablas para atributos multivaluados con MERGE (asumiendo valores separados por comas)

-- Poblar COMPANY_ALTERNATE_WEBSITES
MERGE INTO TFM.COMPANIES.COMPANY_ALTERNATE_WEBSITES T
USING (
    SELECT
        C.ID AS COMPANY_ID,
        TRIM(F.VALUE) AS WEBSITE
    FROM TFM.COMPANIES.COMPANIES C
    JOIN TFM.COMPANIES.DATOS D ON C.NAME = D.COMPANY
    , LATERAL FLATTEN(INPUT => SPLIT(D.ALTERNATE_WEBSITES, ',')) F
    WHERE D.ALTERNATE_WEBSITES IS NOT NULL AND TRIM(F.VALUE) != ''
) S
ON T.COMPANY_ID = S.COMPANY_ID AND T.WEBSITE = S.WEBSITE
WHEN NOT MATCHED THEN
    INSERT (COMPANY_ID, WEBSITE) VALUES (S.COMPANY_ID, S.WEBSITE);

-- Poblar COMPANY_STACKS
MERGE INTO TFM.COMPANIES.COMPANY_STACKS T
USING (
    SELECT
        C.ID AS COMPANY_ID,
        TRIM(F.VALUE) AS TECH
    FROM TFM.COMPANIES.COMPANIES C
    JOIN TFM.COMPANIES.DATOS D ON C.NAME = D.COMPANY
    , LATERAL FLATTEN(INPUT => SPLIT(D.STACK, ',')) F
    WHERE D.STACK IS NOT NULL AND TRIM(F.VALUE) != ''
) S
ON T.COMPANY_ID = S.COMPANY_ID AND T.TECH = S.TECH
WHEN NOT MATCHED THEN
    INSERT (COMPANY_ID, TECH) VALUES (S.COMPANY_ID, S.TECH);

-- Poblar COMPANY_TALKING_POINTS
MERGE INTO TFM.COMPANIES.COMPANY_TALKING_POINTS T
USING (
    SELECT
        C.ID AS COMPANY_ID,
        TRIM(F.VALUE) AS POINT
    FROM TFM.COMPANIES.COMPANIES C
    JOIN TFM.COMPANIES.DATOS D ON C.NAME = D.COMPANY
    , LATERAL FLATTEN(INPUT => SPLIT(D.TALKING_POINTS, ',')) F
    WHERE D.TALKING_POINTS IS NOT NULL AND TRIM(F.VALUE) != ''
) S
ON T.COMPANY_ID = S.COMPANY_ID AND T.POINT = S.POINT
WHEN NOT MATCHED THEN
    INSERT (COMPANY_ID, POINT) VALUES (S.COMPANY_ID, S.POINT);
    